type BatchUnlockBought @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  amount: BigInt! # uint256
  reward: BigInt! # uint256
  lpFees: BigInt! # uint256
  tokenIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BatchUnlockRedeemed @entity(immutable: true) {
  id: Bytes!
  relayer: Bytes! # address
  amount: BigInt! # uint256
  reward: BigInt! # uint256
  lpFees: BigInt! # uint256
  tokenIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClaimWithdrawRequest @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  amount: BigInt! # uint256
  lpSharesMinted: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialized @entity(immutable: true) {
  id: Bytes!
  version: BigInt! # uint64
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  previousOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RelayerRewardsClaimed @entity(immutable: true) {
  id: Bytes!
  relayer: Bytes! # address
  rewards: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SwapPool @entity(immutable: true) {
  id: ID! # pool address
  caller: Bytes! # address
  asset: Bytes! # address
  unlockId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  totalSupply: BigInt! # LP token supply
  liabilities: BigInt! # total liabilities
  unlocking: BigInt! # total unlocking
  volume: BigInt! # lifetime volume
  volumeUSD: BigDecimal! # lifetime volume in USD
  fees: BigInt! # lifetime fees
  feesUSD: BigDecimal! # lifetime fees in USD
  lpRewards: BigInt! # lifetime LP rewards
  lpRewardsUSD: BigDecimal! # lifetime LP rewards in USD
  treasuryCut: BigInt! # treasury cut
  treasuryCutUSD: BigDecimal! # treasury cut in USD
  # unlockQueue: [SwapQueueItem!]! @derivedFrom(field: "pool")

  poolDays: [SwapPoolDay!]! @derivedFrom(field: "pool")
}
type SwapPoolDay @entity {
  id: ID! # pool address + date (timestamp rounded to current day by dividing by 86400)
  date: Int!

  pool: SwapPool!

  totalSupply: BigInt!
  liabilities: BigInt!
  unlocking: BigInt!

  volume: BigInt!
  volumeUSD: BigDecimal!
  fees: BigInt!
  feesUSD: BigDecimal!
  lpRewards: BigInt!
  lpRewardsUSD: BigDecimal!
  treasuryCut: BigInt!
  treasuryCutUSD: BigDecimal!
}

type UnlockBought @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
  reward: BigInt! # uint256
  lpFees: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UnlockRedeemed @entity(immutable: true) {
  id: Bytes!
  relayer: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
  reward: BigInt! # uint256
  lpFees: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Upgraded @entity(immutable: true) {
  id: Bytes!
  implementation: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  amount: BigInt! # uint256
  lpSharesBurnt: BigInt! # uint256
  requestId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
