type BatchUnlockBought @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  amount: BigInt! # uint256
  reward: BigInt! # uint256
  lpFees: BigInt! # uint256
  tokenIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BatchUnlockRedeemed @entity(immutable: true) {
  id: Bytes!
  relayer: Bytes! # address
  amount: BigInt! # uint256
  reward: BigInt! # uint256
  lpFees: BigInt! # uint256
  tokenIds: [BigInt!]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ClaimWithdrawRequest @entity(immutable: true) {
  id: Bytes!
  requestId: BigInt! # uint256
  to: Bytes! # address
  amount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Swap @entity(immutable: true) {
  id: ID!
  pool: SwapPool!
  asset: Bytes! # token address
  from: Bytes! # address
  amount: BigInt! # uint256
  amountUSD: BigDecimal! # uint256
  fee: BigInt! # uint256
  feeUSD: BigDecimal! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Deposit @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  amount: BigInt! # uint256
  lpSharesMinted: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RelayerRewardsClaimed @entity(immutable: true) {
  id: Bytes!
  relayer: Bytes! # address
  rewards: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SwapPool @entity {
  id: ID! # pool address
  totalSupply: BigInt! # LP token supply
  liabilities: BigInt! # total liabilities
  unlocking: BigInt! # total unlocking
  volume: BigInt! # lifetime volume
  volumeUSD: BigDecimal! # lifetime volume in USD
  fees: BigInt! # lifetime fees
  feesUSD: BigDecimal! # lifetime fees in USD
  lpRewards: BigInt! # lifetime LP rewards
  lpRewardsUSD: BigDecimal! # lifetime LP rewards in USD
  treasuryCut: BigInt! # treasury cut
  treasuryCutUSD: BigDecimal! # treasury cut in USD
  # unlockQueue: [SwapQueueItem!]! @derivedFrom(field: "pool")
  numSwaps: BigInt! # number of swaps
  lpToken: Bytes! # LP token address
  poolDays: [SwapPoolDay!]! @derivedFrom(field: "pool")
}

type SwapPoolDay @entity {
  id: ID! # pool address + date (timestamp rounded to current day by dividing by 86400)
  date: Int!

  pool: SwapPool!

  totalSupply: BigInt!
  liabilities: BigInt!
  unlocking: BigInt!

  volume: BigInt!
  volumeUSD: BigDecimal!
  fees: BigInt!
  feesUSD: BigDecimal!
  lpRewards: BigInt!
  lpRewardsUSD: BigDecimal!
  treasuryCut: BigInt!
  treasuryCutUSD: BigDecimal!
}

type UnlockBought @entity(immutable: true) {
  id: Bytes!
  caller: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
  reward: BigInt! # uint256
  lpFees: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type UnlockRedeemed @entity(immutable: true) {
  id: Bytes!
  relayer: Bytes! # address
  tokenId: BigInt! # uint256
  amount: BigInt! # uint256
  reward: BigInt! # uint256
  lpFees: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Withdraw @entity(immutable: true) {
  id: Bytes!
  to: Bytes! # address
  amount: BigInt! # uint256
  lpSharesBurnt: BigInt! # uint256
  requestId: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SwapLPTokenTransferEvent @entity(immutable: true) {
  id: ID!
  timestamp: Int!
  blockNumber: BigInt!

  from: String!
  to: String!
  shares: BigInt!
  value: BigInt!

  # Relational fields
  SwapPool: SwapPool!
}

type User @entity {
  id: ID! # user address
  liquidityPositions: [LiquidityPosition!] @derivedFrom(field: "user")
}

type LiquidityPosition @entity {
  id: ID! # user address + pool address
  user: User!
  pool: SwapPool!
  shares: BigInt!
  netDeposits: BigInt!
}

type PreLaunchPosition @entity {
  id: ID! # user address
  account: Bytes! # user address
  amount: BigInt!
  weightedAmount: BigInt!
  duration: BigInt!
  claimed: Boolean!
  claimedAt: BigInt
}

type PreLaunch @entity {
  id: ID! # contract address
  amount: BigInt!
  weightedAmount: BigInt!
}
