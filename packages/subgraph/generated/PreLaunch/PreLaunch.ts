// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PreLaunch__lockupResultValue0Struct extends ethereum.Tuple {
  get amount(): BigInt {
    return this[0].toBigInt();
  }

  get duration(): BigInt {
    return this[1].toBigInt();
  }
}

export class PreLaunch extends ethereum.SmartContract {
  static bind(address: Address): PreLaunch {
    return new PreLaunch("PreLaunch", address);
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  calculateWeightedDeposit(amount: BigInt, epochs: BigInt): BigInt {
    let result = super.call(
      "calculateWeightedDeposit",
      "calculateWeightedDeposit(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(epochs),
      ],
    );

    return result[0].toBigInt();
  }

  try_calculateWeightedDeposit(
    amount: BigInt,
    epochs: BigInt,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateWeightedDeposit",
      "calculateWeightedDeposit(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromUnsignedBigInt(epochs),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cap(): BigInt {
    let result = super.call("cap", "cap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_cap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("cap", "cap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  claimableTimestamp(): BigInt {
    let result = super.call(
      "claimableTimestamp",
      "claimableTimestamp():(uint96)",
      [],
    );

    return result[0].toBigInt();
  }

  try_claimableTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "claimableTimestamp",
      "claimableTimestamp():(uint96)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deadline(): BigInt {
    let result = super.call("deadline", "deadline():(uint256)", []);

    return result[0].toBigInt();
  }

  try_deadline(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("deadline", "deadline():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isActive(): boolean {
    let result = super.call("isActive", "isActive():(bool)", []);

    return result[0].toBoolean();
  }

  try_isActive(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isActive", "isActive():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isClaimable(): boolean {
    let result = super.call("isClaimable", "isClaimable():(bool)", []);

    return result[0].toBoolean();
  }

  try_isClaimable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isClaimable", "isClaimable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lockup(account: Address): PreLaunch__lockupResultValue0Struct {
    let result = super.call("lockup", "lockup(address):((uint256,uint256))", [
      ethereum.Value.fromAddress(account),
    ]);

    return changetype<PreLaunch__lockupResultValue0Struct>(result[0].toTuple());
  }

  try_lockup(
    account: Address,
  ): ethereum.CallResult<PreLaunch__lockupResultValue0Struct> {
    let result = super.tryCall(
      "lockup",
      "lockup(address):((uint256,uint256))",
      [ethereum.Value.fromAddress(account)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PreLaunch__lockupResultValue0Struct>(value[0].toTuple()),
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  totalDeposits(): BigInt {
    let result = super.call("totalDeposits", "totalDeposits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDeposits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDeposits",
      "totalDeposits():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalWeightedDeposits(): BigInt {
    let result = super.call(
      "totalWeightedDeposits",
      "totalWeightedDeposits():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_totalWeightedDeposits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalWeightedDeposits",
      "totalWeightedDeposits():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  votingEscrow(): Address {
    let result = super.call("votingEscrow", "votingEscrow():(address)", []);

    return result[0].toAddress();
  }

  try_votingEscrow(): ethereum.CallResult<Address> {
    let result = super.tryCall("votingEscrow", "votingEscrow():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _config(): ConstructorCall_configStruct {
    return changetype<ConstructorCall_configStruct>(
      this._call.inputValues[0].value.toTuple(),
    );
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall_configStruct extends ethereum.Tuple {
  get cap(): BigInt {
    return this[0].toBigInt();
  }

  get deadline(): BigInt {
    return this[1].toBigInt();
  }

  get minLockup(): BigInt {
    return this[2].toBigInt();
  }

  get maxLockup(): BigInt {
    return this[3].toBigInt();
  }

  get epochLength(): BigInt {
    return this[4].toBigInt();
  }

  get minMultiplier(): BigInt {
    return this[5].toBigInt();
  }

  get maxMultiplier(): BigInt {
    return this[6].toBigInt();
  }

  get slope(): BigInt {
    return this[7].toBigInt();
  }
}

export class ChangeLockupCall extends ethereum.Call {
  get inputs(): ChangeLockupCall__Inputs {
    return new ChangeLockupCall__Inputs(this);
  }

  get outputs(): ChangeLockupCall__Outputs {
    return new ChangeLockupCall__Outputs(this);
  }
}

export class ChangeLockupCall__Inputs {
  _call: ChangeLockupCall;

  constructor(call: ChangeLockupCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeLockupCall__Outputs {
  _call: ChangeLockupCall;

  constructor(call: ChangeLockupCall) {
    this._call = call;
  }
}

export class ClaimVeTokensCall extends ethereum.Call {
  get inputs(): ClaimVeTokensCall__Inputs {
    return new ClaimVeTokensCall__Inputs(this);
  }

  get outputs(): ClaimVeTokensCall__Outputs {
    return new ClaimVeTokensCall__Outputs(this);
  }
}

export class ClaimVeTokensCall__Inputs {
  _call: ClaimVeTokensCall;

  constructor(call: ClaimVeTokensCall) {
    this._call = call;
  }
}

export class ClaimVeTokensCall__Outputs {
  _call: ClaimVeTokensCall;

  constructor(call: ClaimVeTokensCall) {
    this._call = call;
  }
}

export class DepositETHCall extends ethereum.Call {
  get inputs(): DepositETHCall__Inputs {
    return new DepositETHCall__Inputs(this);
  }

  get outputs(): DepositETHCall__Outputs {
    return new DepositETHCall__Outputs(this);
  }
}

export class DepositETHCall__Inputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }

  get duration(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositETHCall__Outputs {
  _call: DepositETHCall;

  constructor(call: DepositETHCall) {
    this._call = call;
  }
}

export class DepositWETHCall extends ethereum.Call {
  get inputs(): DepositWETHCall__Inputs {
    return new DepositWETHCall__Inputs(this);
  }

  get outputs(): DepositWETHCall__Outputs {
    return new DepositWETHCall__Outputs(this);
  }
}

export class DepositWETHCall__Inputs {
  _call: DepositWETHCall;

  constructor(call: DepositWETHCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get duration(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositWETHCall__Outputs {
  _call: DepositWETHCall;

  constructor(call: DepositWETHCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintLpEthCall extends ethereum.Call {
  get inputs(): MintLpEthCall__Inputs {
    return new MintLpEthCall__Inputs(this);
  }

  get outputs(): MintLpEthCall__Outputs {
    return new MintLpEthCall__Outputs(this);
  }
}

export class MintLpEthCall__Inputs {
  _call: MintLpEthCall;

  constructor(call: MintLpEthCall) {
    this._call = call;
  }

  get minLpShares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintLpEthCall__Outputs {
  _call: MintLpEthCall;

  constructor(call: MintLpEthCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetLpEthCall extends ethereum.Call {
  get inputs(): SetLpEthCall__Inputs {
    return new SetLpEthCall__Inputs(this);
  }

  get outputs(): SetLpEthCall__Outputs {
    return new SetLpEthCall__Outputs(this);
  }
}

export class SetLpEthCall__Inputs {
  _call: SetLpEthCall;

  constructor(call: SetLpEthCall) {
    this._call = call;
  }

  get _lpEth(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetLpEthCall__Outputs {
  _call: SetLpEthCall;

  constructor(call: SetLpEthCall) {
    this._call = call;
  }
}

export class SetVotingEscrowCall extends ethereum.Call {
  get inputs(): SetVotingEscrowCall__Inputs {
    return new SetVotingEscrowCall__Inputs(this);
  }

  get outputs(): SetVotingEscrowCall__Outputs {
    return new SetVotingEscrowCall__Outputs(this);
  }
}

export class SetVotingEscrowCall__Inputs {
  _call: SetVotingEscrowCall;

  constructor(call: SetVotingEscrowCall) {
    this._call = call;
  }

  get _votingEscrow(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVotingEscrowCall__Outputs {
  _call: SetVotingEscrowCall;

  constructor(call: SetVotingEscrowCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
